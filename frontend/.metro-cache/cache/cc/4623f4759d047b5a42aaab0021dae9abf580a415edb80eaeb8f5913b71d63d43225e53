{"dependencies":[{"name":"crypto-js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"TLjsXnAWOlf/gpObabse3HZX8VY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"encrypt\", {\n    enumerable: true,\n    get: function () {\n      return encrypt;\n    }\n  });\n  Object.defineProperty(exports, \"decrypt\", {\n    enumerable: true,\n    get: function () {\n      return decrypt;\n    }\n  });\n  var _cryptoJs = require(_dependencyMap[0], \"crypto-js\");\n  var CryptoJS = _interopDefault(_cryptoJs);\n  // Get encryption key from environment\n  const getEncryptionKey = () => {\n    return process.env.EXPO_PUBLIC_ENCRYPTION_KEY || 'default-key-change-in-production';\n  };\n\n  /**\n   * Encrypt sensitive data (e.g., Aadhar number)\n   * @param {string} data - Data to encrypt\n   * @returns {string} Encrypted data\n   */\n  const encrypt = data => {\n    try {\n      if (!data) return '';\n      const key = getEncryptionKey();\n      const encrypted = CryptoJS.default.AES.encrypt(data, key).toString();\n      return encrypted;\n    } catch (e) {\n      console.error('Encryption error:', e);\n      throw new Error('Failed to encrypt data');\n    }\n  };\n\n  /**\n   * Decrypt sensitive data\n   * @param {string} encryptedData - Encrypted data\n   * @returns {string} Decrypted data\n   */\n  const decrypt = encryptedData => {\n    try {\n      if (!encryptedData) return '';\n      const key = getEncryptionKey();\n      const bytes = CryptoJS.default.AES.decrypt(encryptedData, key);\n      const decrypted = bytes.toString(CryptoJS.default.enc.Utf8);\n      return decrypted;\n    } catch (e) {\n      console.error('Decryption error:', e);\n      throw new Error('Failed to decrypt data');\n    }\n  };\n});","lineCount":65,"map":[[12,2,13,0,"Object"],[12,8,13,0],[12,9,13,0,"defineProperty"],[12,23,13,0],[12,24,13,0,"exports"],[12,31,13,0],[13,4,13,0,"enumerable"],[13,14,13,0],[14,4,13,0,"get"],[14,7,13,0],[14,18,13,0,"get"],[14,19,13,0],[15,6,13,0],[15,13,13,0,"encrypt"],[15,20,13,0],[16,4,13,0],[17,2,13,0],[18,2,30,0,"Object"],[18,8,30,0],[18,9,30,0,"defineProperty"],[18,23,30,0],[18,24,30,0,"exports"],[18,31,30,0],[19,4,30,0,"enumerable"],[19,14,30,0],[20,4,30,0,"get"],[20,7,30,0],[20,18,30,0,"get"],[20,19,30,0],[21,6,30,0],[21,13,30,0,"decrypt"],[21,20,30,0],[22,4,30,0],[23,2,30,0],[24,2,1,0],[24,6,1,0,"_cryptoJs"],[24,15,1,0],[24,18,1,0,"require"],[24,25,1,0],[24,26,1,0,"_dependencyMap"],[24,40,1,0],[25,2,1,0],[25,6,1,0,"CryptoJS"],[25,14,1,0],[25,17,1,0,"_interopDefault"],[25,32,1,0],[25,33,1,0,"_cryptoJs"],[25,42,1,0],[26,2,3,0],[27,2,4,0],[27,8,4,6,"getEncryptionKey"],[27,24,4,22],[27,27,4,25,"getEncryptionKey"],[27,28,4,25],[27,33,4,31],[28,4,5,2],[28,11,5,9,"process"],[28,18,5,16],[28,19,5,17,"env"],[28,22,5,20],[28,23,5,21,"EXPO_PUBLIC_ENCRYPTION_KEY"],[28,49,5,47],[28,53,5,51],[28,87,5,85],[29,2,6,0],[29,3,6,1],[31,2,8,0],[32,0,9,0],[33,0,10,0],[34,0,11,0],[35,0,12,0],[36,2,13,7],[36,8,13,13,"encrypt"],[36,15,13,20],[36,18,13,24,"data"],[36,22,13,28],[36,26,13,33],[37,4,14,2],[37,8,14,6],[38,6,15,4],[38,10,15,8],[38,11,15,9,"data"],[38,15,15,13],[38,17,15,15],[38,24,15,22],[38,26,15,24],[39,6,16,4],[39,12,16,10,"key"],[39,15,16,13],[39,18,16,16,"getEncryptionKey"],[39,34,16,32],[39,35,16,33],[39,36,16,34],[40,6,17,4],[40,12,17,10,"encrypted"],[40,21,17,19],[40,24,17,22,"CryptoJS"],[40,32,17,30],[40,33,17,30,"default"],[40,40,17,30],[40,41,17,31,"AES"],[40,44,17,34],[40,45,17,35,"encrypt"],[40,52,17,42],[40,53,17,43,"data"],[40,57,17,47],[40,59,17,49,"key"],[40,62,17,52],[40,63,17,53],[40,64,17,54,"toString"],[40,72,17,62],[40,73,17,63],[40,74,17,64],[41,6,18,4],[41,13,18,11,"encrypted"],[41,22,18,20],[42,4,19,2],[42,5,19,3],[42,6,19,4],[42,13,19,11,"e"],[42,14,19,12],[42,16,19,14],[43,6,20,4,"console"],[43,13,20,11],[43,14,20,12,"error"],[43,19,20,17],[43,20,20,18],[43,39,20,37],[43,41,20,39,"e"],[43,42,20,40],[43,43,20,41],[44,6,21,4],[44,12,21,10],[44,16,21,14,"Error"],[44,21,21,19],[44,22,21,20],[44,46,21,44],[44,47,21,45],[45,4,22,2],[46,2,23,0],[46,3,23,1],[48,2,25,0],[49,0,26,0],[50,0,27,0],[51,0,28,0],[52,0,29,0],[53,2,30,7],[53,8,30,13,"decrypt"],[53,15,30,20],[53,18,30,24,"encryptedData"],[53,31,30,37],[53,35,30,42],[54,4,31,2],[54,8,31,6],[55,6,32,4],[55,10,32,8],[55,11,32,9,"encryptedData"],[55,24,32,22],[55,26,32,24],[55,33,32,31],[55,35,32,33],[56,6,33,4],[56,12,33,10,"key"],[56,15,33,13],[56,18,33,16,"getEncryptionKey"],[56,34,33,32],[56,35,33,33],[56,36,33,34],[57,6,34,4],[57,12,34,10,"bytes"],[57,17,34,15],[57,20,34,18,"CryptoJS"],[57,28,34,26],[57,29,34,26,"default"],[57,36,34,26],[57,37,34,27,"AES"],[57,40,34,30],[57,41,34,31,"decrypt"],[57,48,34,38],[57,49,34,39,"encryptedData"],[57,62,34,52],[57,64,34,54,"key"],[57,67,34,57],[57,68,34,58],[58,6,35,4],[58,12,35,10,"decrypted"],[58,21,35,19],[58,24,35,22,"bytes"],[58,29,35,27],[58,30,35,28,"toString"],[58,38,35,36],[58,39,35,37,"CryptoJS"],[58,47,35,45],[58,48,35,45,"default"],[58,55,35,45],[58,56,35,46,"enc"],[58,59,35,49],[58,60,35,50,"Utf8"],[58,64,35,54],[58,65,35,55],[59,6,36,4],[59,13,36,11,"decrypted"],[59,22,36,20],[60,4,37,2],[60,5,37,3],[60,6,37,4],[60,13,37,11,"e"],[60,14,37,12],[60,16,37,14],[61,6,38,4,"console"],[61,13,38,11],[61,14,38,12,"error"],[61,19,38,17],[61,20,38,18],[61,39,38,37],[61,41,38,39,"e"],[61,42,38,40],[61,43,38,41],[62,6,39,4],[62,12,39,10],[62,16,39,14,"Error"],[62,21,39,19],[62,22,39,20],[62,46,39,44],[62,47,39,45],[63,4,40,2],[64,2,41,0],[64,3,41,1],[65,0,41,2],[65,3]],"functionMap":{"names":["<global>","getEncryptionKey","encrypt","decrypt"],"mappings":"AAA;yBCG;CDE;uBEO;CFU;uBGO;CHW"},"hasCjsExports":false},"type":"js/module"}]}