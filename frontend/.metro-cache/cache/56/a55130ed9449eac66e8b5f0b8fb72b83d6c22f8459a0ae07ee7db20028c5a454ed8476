{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"uploadFile\", {\n    enumerable: true,\n    get: function () {\n      return uploadFile;\n    }\n  });\n  Object.defineProperty(exports, \"callOCR\", {\n    enumerable: true,\n    get: function () {\n      return callOCR;\n    }\n  });\n  Object.defineProperty(exports, \"generateReport\", {\n    enumerable: true,\n    get: function () {\n      return generateReport;\n    }\n  });\n  /**\n   * Cloud Upload Stub\n   * Replace with actual cloud storage integration (S3, GCS, Azure Blob)\n   * \n   * Example S3 implementation:\n   * - Install: yarn add aws-sdk\n   * - Configure AWS credentials\n   * - Use S3 putObject to upload file\n   * \n   * @param {string} fileUri - Local file URI or base64 data\n   * @param {string} fileName - Name for the uploaded file\n   * @returns {Promise<string>} URL of uploaded file\n   */\n  const uploadFile = async (fileUri, fileName) => {\n    try {\n      const apiUrl = process.env.EXPO_PUBLIC_API_UPLOAD_URL;\n      if (!apiUrl || apiUrl.includes('your-cloud-storage')) {\n        // Stub mode - return mock URL\n        console.log('[STUB] File upload called:', fileName);\n        return `https://mock-storage.example.com/${fileName}`;\n      }\n\n      // Production implementation (replace with actual API call)\n      /*\n      const formData = new FormData();\n      formData.append('file', {\n        uri: fileUri,\n        type: 'image/jpeg',\n        name: fileName,\n      });\n      \n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      \n      const data = await response.json();\n      return data.url;\n      */\n\n      return fileUri; // Return local URI in stub mode\n    } catch (e) {\n      console.error('Upload error:', e);\n      throw e;\n    }\n  };\n\n  /**\n   * OCR Service Stub\n   * Replace with actual OCR service (Azure OCR, Google Cloud Vision, Tesseract)\n   * \n   * Example Azure OCR:\n   * - Use Azure Computer Vision API\n   * - Send image for text extraction\n   * - Parse results for Aadhar/document numbers\n   * \n   * @param {string} imageUri - Image to process\n   * @returns {Promise<object>} Extracted text data\n   */\n  const callOCR = async imageUri => {\n    try {\n      const apiUrl = process.env.EXPO_PUBLIC_API_OCR_URL;\n      if (!apiUrl || apiUrl.includes('your-ocr-service')) {\n        // Stub mode - return mock data\n        console.log('[STUB] OCR called for image');\n        return {\n          text: 'Mock OCR Result',\n          confidence: 0.95,\n          fields: {\n            aadhar: '1234-5678-9012',\n            name: 'Sample Name'\n          }\n        };\n      }\n\n      // Production implementation\n      /*\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ image: imageUri })\n      });\n      \n      const data = await response.json();\n      return data;\n      */\n\n      return {\n        text: '',\n        fields: {}\n      };\n    } catch (e) {\n      console.error('OCR error:', e);\n      throw e;\n    }\n  };\n\n  /**\n   * Generate report stub\n   * Replace with actual PDF generation (react-native-pdf, server-side generation)\n   * \n   * @param {object} survey - Survey data\n   * @returns {Promise<object>} Report data or download link\n   */\n  const generateReport = async survey => {\n    try {\n      // Current: Return JSON format\n      const report = {\n        reportId: `REPORT-${Date.now()}`,\n        generatedAt: new Date().toISOString(),\n        survey: {\n          owner: survey.name,\n          area: survey.area,\n          tax: survey.tax,\n          location: survey.gps,\n          address: survey.address\n        },\n        format: 'json'\n      };\n      console.log('[STUB] Report generated:', report.reportId);\n\n      // To implement PDF:\n      // 1. Server-side: Use library like pdfkit, puppeteer\n      // 2. Client-side: Use react-native-pdf or expo-print\n      /*\n      import * as Print from 'expo-print';\n      const html = `<html>...report template...</html>`;\n      const { uri } = await Print.printToFileAsync({ html });\n      return { uri, format: 'pdf' };\n      */\n\n      return report;\n    } catch (e) {\n      console.error('Report generation error:', e);\n      throw e;\n    }\n  };\n});","lineCount":165,"map":[[7,2,14,0,"Object"],[7,8,14,0],[7,9,14,0,"defineProperty"],[7,23,14,0],[7,24,14,0,"exports"],[7,31,14,0],[8,4,14,0,"enumerable"],[8,14,14,0],[9,4,14,0,"get"],[9,7,14,0],[9,18,14,0,"get"],[9,19,14,0],[10,6,14,0],[10,13,14,0,"uploadFile"],[10,23,14,0],[11,4,14,0],[12,2,14,0],[13,2,64,0,"Object"],[13,8,64,0],[13,9,64,0,"defineProperty"],[13,23,64,0],[13,24,64,0,"exports"],[13,31,64,0],[14,4,64,0,"enumerable"],[14,14,64,0],[15,4,64,0,"get"],[15,7,64,0],[15,18,64,0,"get"],[15,19,64,0],[16,6,64,0],[16,13,64,0,"callOCR"],[16,20,64,0],[17,4,64,0],[18,2,64,0],[19,2,107,0,"Object"],[19,8,107,0],[19,9,107,0,"defineProperty"],[19,23,107,0],[19,24,107,0,"exports"],[19,31,107,0],[20,4,107,0,"enumerable"],[20,14,107,0],[21,4,107,0,"get"],[21,7,107,0],[21,18,107,0,"get"],[21,19,107,0],[22,6,107,0],[22,13,107,0,"generateReport"],[22,27,107,0],[23,4,107,0],[24,2,107,0],[25,2,1,0],[26,0,2,0],[27,0,3,0],[28,0,4,0],[29,0,5,0],[30,0,6,0],[31,0,7,0],[32,0,8,0],[33,0,9,0],[34,0,10,0],[35,0,11,0],[36,0,12,0],[37,0,13,0],[38,2,14,7],[38,8,14,13,"uploadFile"],[38,18,14,23],[38,21,14,26],[38,27,14,26,"uploadFile"],[38,28,14,33,"fileUri"],[38,35,14,40],[38,37,14,42,"fileName"],[38,45,14,50],[38,50,14,55],[39,4,15,2],[39,8,15,6],[40,6,16,4],[40,12,16,10,"apiUrl"],[40,18,16,16],[40,21,16,19,"process"],[40,28,16,26],[40,29,16,27,"env"],[40,32,16,30],[40,33,16,31,"EXPO_PUBLIC_API_UPLOAD_URL"],[40,59,16,57],[41,6,18,4],[41,10,18,8],[41,11,18,9,"apiUrl"],[41,17,18,15],[41,21,18,19,"apiUrl"],[41,27,18,25],[41,28,18,26,"includes"],[41,36,18,34],[41,37,18,35],[41,57,18,55],[41,58,18,56],[41,60,18,58],[42,8,19,6],[43,8,20,6,"console"],[43,15,20,13],[43,16,20,14,"log"],[43,19,20,17],[43,20,20,18],[43,48,20,46],[43,50,20,48,"fileName"],[43,58,20,56],[43,59,20,57],[44,8,21,6],[44,15,21,13],[44,51,21,49,"fileName"],[44,59,21,57],[44,61,21,59],[45,6,22,4],[47,6,24,4],[48,6,25,4],[49,0,26,0],[50,0,27,0],[51,0,28,0],[52,0,29,0],[53,0,30,0],[54,0,31,0],[55,0,32,0],[56,0,33,0],[57,0,34,0],[58,0,35,0],[59,0,36,0],[60,0,37,0],[61,0,38,0],[62,0,39,0],[63,0,40,0],[64,0,41,0],[65,0,42,0],[66,0,43,0],[68,6,45,4],[68,13,45,11,"fileUri"],[68,20,45,18],[68,21,45,19],[68,22,45,20],[69,4,46,2],[69,5,46,3],[69,6,46,4],[69,13,46,11,"e"],[69,14,46,12],[69,16,46,14],[70,6,47,4,"console"],[70,13,47,11],[70,14,47,12,"error"],[70,19,47,17],[70,20,47,18],[70,35,47,33],[70,37,47,35,"e"],[70,38,47,36],[70,39,47,37],[71,6,48,4],[71,12,48,10,"e"],[71,13,48,11],[72,4,49,2],[73,2,50,0],[73,3,50,1],[75,2,52,0],[76,0,53,0],[77,0,54,0],[78,0,55,0],[79,0,56,0],[80,0,57,0],[81,0,58,0],[82,0,59,0],[83,0,60,0],[84,0,61,0],[85,0,62,0],[86,0,63,0],[87,2,64,7],[87,8,64,13,"callOCR"],[87,15,64,20],[87,18,64,23],[87,24,64,30,"imageUri"],[87,32,64,38],[87,36,64,43],[88,4,65,2],[88,8,65,6],[89,6,66,4],[89,12,66,10,"apiUrl"],[89,18,66,16],[89,21,66,19,"process"],[89,28,66,26],[89,29,66,27,"env"],[89,32,66,30],[89,33,66,31,"EXPO_PUBLIC_API_OCR_URL"],[89,56,66,54],[90,6,68,4],[90,10,68,8],[90,11,68,9,"apiUrl"],[90,17,68,15],[90,21,68,19,"apiUrl"],[90,27,68,25],[90,28,68,26,"includes"],[90,36,68,34],[90,37,68,35],[90,55,68,53],[90,56,68,54],[90,58,68,56],[91,8,69,6],[92,8,70,6,"console"],[92,15,70,13],[92,16,70,14,"log"],[92,19,70,17],[92,20,70,18],[92,49,70,47],[92,50,70,48],[93,8,71,6],[93,15,71,13],[94,10,72,8,"text"],[94,14,72,12],[94,16,72,14],[94,33,72,31],[95,10,73,8,"confidence"],[95,20,73,18],[95,22,73,20],[95,26,73,24],[96,10,74,8,"fields"],[96,16,74,14],[96,18,74,16],[97,12,75,10,"aadhar"],[97,18,75,16],[97,20,75,18],[97,36,75,34],[98,12,76,10,"name"],[98,16,76,14],[98,18,76,16],[99,10,77,8],[100,8,78,6],[100,9,78,7],[101,6,79,4],[103,6,81,4],[104,6,82,4],[105,0,83,0],[106,0,84,0],[107,0,85,0],[108,0,86,0],[109,0,87,0],[110,0,88,0],[111,0,89,0],[112,0,90,0],[113,0,91,0],[115,6,93,4],[115,13,93,11],[116,8,93,13,"text"],[116,12,93,17],[116,14,93,19],[116,16,93,21],[117,8,93,23,"fields"],[117,14,93,29],[117,16,93,31],[117,17,93,32],[118,6,93,34],[118,7,93,35],[119,4,94,2],[119,5,94,3],[119,6,94,4],[119,13,94,11,"e"],[119,14,94,12],[119,16,94,14],[120,6,95,4,"console"],[120,13,95,11],[120,14,95,12,"error"],[120,19,95,17],[120,20,95,18],[120,32,95,30],[120,34,95,32,"e"],[120,35,95,33],[120,36,95,34],[121,6,96,4],[121,12,96,10,"e"],[121,13,96,11],[122,4,97,2],[123,2,98,0],[123,3,98,1],[125,2,100,0],[126,0,101,0],[127,0,102,0],[128,0,103,0],[129,0,104,0],[130,0,105,0],[131,0,106,0],[132,2,107,7],[132,8,107,13,"generateReport"],[132,22,107,27],[132,25,107,30],[132,31,107,37,"survey"],[132,37,107,43],[132,41,107,48],[133,4,108,2],[133,8,108,6],[134,6,109,4],[135,6,110,4],[135,12,110,10,"report"],[135,18,110,16],[135,21,110,19],[136,8,111,6,"reportId"],[136,16,111,14],[136,18,111,16],[136,28,111,26,"Date"],[136,32,111,30],[136,33,111,31,"now"],[136,36,111,34],[136,37,111,35],[136,38,111,36],[136,40,111,38],[137,8,112,6,"generatedAt"],[137,19,112,17],[137,21,112,19],[137,25,112,23,"Date"],[137,29,112,27],[137,30,112,28],[137,31,112,29],[137,32,112,30,"toISOString"],[137,43,112,41],[137,44,112,42],[137,45,112,43],[138,8,113,6,"survey"],[138,14,113,12],[138,16,113,14],[139,10,114,8,"owner"],[139,15,114,13],[139,17,114,15,"survey"],[139,23,114,21],[139,24,114,22,"name"],[139,28,114,26],[140,10,115,8,"area"],[140,14,115,12],[140,16,115,14,"survey"],[140,22,115,20],[140,23,115,21,"area"],[140,27,115,25],[141,10,116,8,"tax"],[141,13,116,11],[141,15,116,13,"survey"],[141,21,116,19],[141,22,116,20,"tax"],[141,25,116,23],[142,10,117,8,"location"],[142,18,117,16],[142,20,117,18,"survey"],[142,26,117,24],[142,27,117,25,"gps"],[142,30,117,28],[143,10,118,8,"address"],[143,17,118,15],[143,19,118,17,"survey"],[143,25,118,23],[143,26,118,24,"address"],[144,8,119,6],[144,9,119,7],[145,8,120,6,"format"],[145,14,120,12],[145,16,120,14],[146,6,121,4],[146,7,121,5],[147,6,123,4,"console"],[147,13,123,11],[147,14,123,12,"log"],[147,17,123,15],[147,18,123,16],[147,44,123,42],[147,46,123,44,"report"],[147,52,123,50],[147,53,123,51,"reportId"],[147,61,123,59],[147,62,123,60],[149,6,125,4],[150,6,126,4],[151,6,127,4],[152,6,128,4],[153,0,129,0],[154,0,130,0],[155,0,131,0],[156,0,132,0],[157,0,133,0],[159,6,135,4],[159,13,135,11,"report"],[159,19,135,17],[160,4,136,2],[160,5,136,3],[160,6,136,4],[160,13,136,11,"e"],[160,14,136,12],[160,16,136,14],[161,6,137,4,"console"],[161,13,137,11],[161,14,137,12,"error"],[161,19,137,17],[161,20,137,18],[161,46,137,44],[161,48,137,46,"e"],[161,49,137,47],[161,50,137,48],[162,6,138,4],[162,12,138,10,"e"],[162,13,138,11],[163,4,139,2],[164,2,140,0],[164,3,140,1],[165,0,140,2],[165,3]],"functionMap":{"names":["<global>","uploadFile","callOCR","generateReport"],"mappings":"AAA;0BCa;CDoC;uBEc;CFkC;8BGS;CHiC"},"hasCjsExports":false},"type":"js/module"}]}