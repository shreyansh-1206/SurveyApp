{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"uploadFile\", {\n    enumerable: true,\n    get: function () {\n      return uploadFile;\n    }\n  });\n  Object.defineProperty(exports, \"callOCR\", {\n    enumerable: true,\n    get: function () {\n      return callOCR;\n    }\n  });\n  Object.defineProperty(exports, \"generateReport\", {\n    enumerable: true,\n    get: function () {\n      return generateReport;\n    }\n  });\n  var _expoVirtualEnv = require(_dependencyMap[0], \"expo/virtual/env\");\n  /**\n   * Cloud Upload Stub\n   * Replace with actual cloud storage integration (S3, GCS, Azure Blob)\n   * \n   * Example S3 implementation:\n   * - Install: yarn add aws-sdk\n   * - Configure AWS credentials\n   * - Use S3 putObject to upload file\n   * \n   * @param {string} fileUri - Local file URI or base64 data\n   * @param {string} fileName - Name for the uploaded file\n   * @returns {Promise<string>} URL of uploaded file\n   */\n  const uploadFile = async (fileUri, fileName) => {\n    try {\n      const apiUrl = _expoVirtualEnv.env.EXPO_PUBLIC_API_UPLOAD_URL;\n      if (!apiUrl || apiUrl.includes('your-cloud-storage')) {\n        // Stub mode - return mock URL\n        console.log('[STUB] File upload called:', fileName);\n        return `https://mock-storage.example.com/${fileName}`;\n      }\n\n      // Production implementation (replace with actual API call)\n      /*\n      const formData = new FormData();\n      formData.append('file', {\n        uri: fileUri,\n        type: 'image/jpeg',\n        name: fileName,\n      });\n      \n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      \n      const data = await response.json();\n      return data.url;\n      */\n\n      return fileUri; // Return local URI in stub mode\n    } catch (e) {\n      console.error('Upload error:', e);\n      throw e;\n    }\n  };\n\n  /**\n   * OCR Service Stub\n   * Replace with actual OCR service (Azure OCR, Google Cloud Vision, Tesseract)\n   * \n   * Example Azure OCR:\n   * - Use Azure Computer Vision API\n   * - Send image for text extraction\n   * - Parse results for Aadhar/document numbers\n   * \n   * @param {string} imageUri - Image to process\n   * @returns {Promise<object>} Extracted text data\n   */\n  const callOCR = async imageUri => {\n    try {\n      const apiUrl = _expoVirtualEnv.env.EXPO_PUBLIC_API_OCR_URL;\n      if (!apiUrl || apiUrl.includes('your-ocr-service')) {\n        // Stub mode - return mock data\n        console.log('[STUB] OCR called for image');\n        return {\n          text: 'Mock OCR Result',\n          confidence: 0.95,\n          fields: {\n            aadhar: '1234-5678-9012',\n            name: 'Sample Name'\n          }\n        };\n      }\n\n      // Production implementation\n      /*\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ image: imageUri })\n      });\n      \n      const data = await response.json();\n      return data;\n      */\n\n      return {\n        text: '',\n        fields: {}\n      };\n    } catch (e) {\n      console.error('OCR error:', e);\n      throw e;\n    }\n  };\n\n  /**\n   * Generate report stub\n   * Replace with actual PDF generation (react-native-pdf, server-side generation)\n   * \n   * @param {object} survey - Survey data\n   * @returns {Promise<object>} Report data or download link\n   */\n  const generateReport = async survey => {\n    try {\n      // Current: Return JSON format\n      const report = {\n        reportId: `REPORT-${Date.now()}`,\n        generatedAt: new Date().toISOString(),\n        survey: {\n          owner: survey.name,\n          area: survey.area,\n          tax: survey.tax,\n          location: survey.gps,\n          address: survey.address\n        },\n        format: 'json'\n      };\n      console.log('[STUB] Report generated:', report.reportId);\n\n      // To implement PDF:\n      // 1. Server-side: Use library like pdfkit, puppeteer\n      // 2. Client-side: Use react-native-pdf or expo-print\n      /*\n      import * as Print from 'expo-print';\n      const html = `<html>...report template...</html>`;\n      const { uri } = await Print.printToFileAsync({ html });\n      return { uri, format: 'pdf' };\n      */\n\n      return report;\n    } catch (e) {\n      console.error('Report generation error:', e);\n      throw e;\n    }\n  };\n});","lineCount":166,"map":[[7,2,14,0,"Object"],[7,8,14,0],[7,9,14,0,"defineProperty"],[7,23,14,0],[7,24,14,0,"exports"],[7,31,14,0],[8,4,14,0,"enumerable"],[8,14,14,0],[9,4,14,0,"get"],[9,7,14,0],[9,18,14,0,"get"],[9,19,14,0],[10,6,14,0],[10,13,14,0,"uploadFile"],[10,23,14,0],[11,4,14,0],[12,2,14,0],[13,2,64,0,"Object"],[13,8,64,0],[13,9,64,0,"defineProperty"],[13,23,64,0],[13,24,64,0,"exports"],[13,31,64,0],[14,4,64,0,"enumerable"],[14,14,64,0],[15,4,64,0,"get"],[15,7,64,0],[15,18,64,0,"get"],[15,19,64,0],[16,6,64,0],[16,13,64,0,"callOCR"],[16,20,64,0],[17,4,64,0],[18,2,64,0],[19,2,107,0,"Object"],[19,8,107,0],[19,9,107,0,"defineProperty"],[19,23,107,0],[19,24,107,0,"exports"],[19,31,107,0],[20,4,107,0,"enumerable"],[20,14,107,0],[21,4,107,0,"get"],[21,7,107,0],[21,18,107,0,"get"],[21,19,107,0],[22,6,107,0],[22,13,107,0,"generateReport"],[22,27,107,0],[23,4,107,0],[24,2,107,0],[25,2,140,2],[25,6,140,2,"_expoVirtualEnv"],[25,21,140,2],[25,24,140,2,"require"],[25,31,140,2],[25,32,140,2,"_dependencyMap"],[25,46,140,2],[26,2,1,0],[27,0,2,0],[28,0,3,0],[29,0,4,0],[30,0,5,0],[31,0,6,0],[32,0,7,0],[33,0,8,0],[34,0,9,0],[35,0,10,0],[36,0,11,0],[37,0,12,0],[38,0,13,0],[39,2,14,7],[39,8,14,13,"uploadFile"],[39,18,14,23],[39,21,14,26],[39,27,14,26,"uploadFile"],[39,28,14,33,"fileUri"],[39,35,14,40],[39,37,14,42,"fileName"],[39,45,14,50],[39,50,14,55],[40,4,15,2],[40,8,15,6],[41,6,16,4],[41,12,16,10,"apiUrl"],[41,18,16,16],[41,21,16,16,"_expoVirtualEnv"],[41,36,16,16],[41,37,16,16,"env"],[41,40,16,16],[41,41,16,16,"EXPO_PUBLIC_API_UPLOAD_URL"],[41,67,16,57],[42,6,18,4],[42,10,18,8],[42,11,18,9,"apiUrl"],[42,17,18,15],[42,21,18,19,"apiUrl"],[42,27,18,25],[42,28,18,26,"includes"],[42,36,18,34],[42,37,18,35],[42,57,18,55],[42,58,18,56],[42,60,18,58],[43,8,19,6],[44,8,20,6,"console"],[44,15,20,13],[44,16,20,14,"log"],[44,19,20,17],[44,20,20,18],[44,48,20,46],[44,50,20,48,"fileName"],[44,58,20,56],[44,59,20,57],[45,8,21,6],[45,15,21,13],[45,51,21,49,"fileName"],[45,59,21,57],[45,61,21,59],[46,6,22,4],[48,6,24,4],[49,6,25,4],[50,0,26,0],[51,0,27,0],[52,0,28,0],[53,0,29,0],[54,0,30,0],[55,0,31,0],[56,0,32,0],[57,0,33,0],[58,0,34,0],[59,0,35,0],[60,0,36,0],[61,0,37,0],[62,0,38,0],[63,0,39,0],[64,0,40,0],[65,0,41,0],[66,0,42,0],[67,0,43,0],[69,6,45,4],[69,13,45,11,"fileUri"],[69,20,45,18],[69,21,45,19],[69,22,45,20],[70,4,46,2],[70,5,46,3],[70,6,46,4],[70,13,46,11,"e"],[70,14,46,12],[70,16,46,14],[71,6,47,4,"console"],[71,13,47,11],[71,14,47,12,"error"],[71,19,47,17],[71,20,47,18],[71,35,47,33],[71,37,47,35,"e"],[71,38,47,36],[71,39,47,37],[72,6,48,4],[72,12,48,10,"e"],[72,13,48,11],[73,4,49,2],[74,2,50,0],[74,3,50,1],[76,2,52,0],[77,0,53,0],[78,0,54,0],[79,0,55,0],[80,0,56,0],[81,0,57,0],[82,0,58,0],[83,0,59,0],[84,0,60,0],[85,0,61,0],[86,0,62,0],[87,0,63,0],[88,2,64,7],[88,8,64,13,"callOCR"],[88,15,64,20],[88,18,64,23],[88,24,64,30,"imageUri"],[88,32,64,38],[88,36,64,43],[89,4,65,2],[89,8,65,6],[90,6,66,4],[90,12,66,10,"apiUrl"],[90,18,66,16],[90,21,66,16,"_expoVirtualEnv"],[90,36,66,16],[90,37,66,16,"env"],[90,40,66,16],[90,41,66,16,"EXPO_PUBLIC_API_OCR_URL"],[90,64,66,54],[91,6,68,4],[91,10,68,8],[91,11,68,9,"apiUrl"],[91,17,68,15],[91,21,68,19,"apiUrl"],[91,27,68,25],[91,28,68,26,"includes"],[91,36,68,34],[91,37,68,35],[91,55,68,53],[91,56,68,54],[91,58,68,56],[92,8,69,6],[93,8,70,6,"console"],[93,15,70,13],[93,16,70,14,"log"],[93,19,70,17],[93,20,70,18],[93,49,70,47],[93,50,70,48],[94,8,71,6],[94,15,71,13],[95,10,72,8,"text"],[95,14,72,12],[95,16,72,14],[95,33,72,31],[96,10,73,8,"confidence"],[96,20,73,18],[96,22,73,20],[96,26,73,24],[97,10,74,8,"fields"],[97,16,74,14],[97,18,74,16],[98,12,75,10,"aadhar"],[98,18,75,16],[98,20,75,18],[98,36,75,34],[99,12,76,10,"name"],[99,16,76,14],[99,18,76,16],[100,10,77,8],[101,8,78,6],[101,9,78,7],[102,6,79,4],[104,6,81,4],[105,6,82,4],[106,0,83,0],[107,0,84,0],[108,0,85,0],[109,0,86,0],[110,0,87,0],[111,0,88,0],[112,0,89,0],[113,0,90,0],[114,0,91,0],[116,6,93,4],[116,13,93,11],[117,8,93,13,"text"],[117,12,93,17],[117,14,93,19],[117,16,93,21],[118,8,93,23,"fields"],[118,14,93,29],[118,16,93,31],[118,17,93,32],[119,6,93,34],[119,7,93,35],[120,4,94,2],[120,5,94,3],[120,6,94,4],[120,13,94,11,"e"],[120,14,94,12],[120,16,94,14],[121,6,95,4,"console"],[121,13,95,11],[121,14,95,12,"error"],[121,19,95,17],[121,20,95,18],[121,32,95,30],[121,34,95,32,"e"],[121,35,95,33],[121,36,95,34],[122,6,96,4],[122,12,96,10,"e"],[122,13,96,11],[123,4,97,2],[124,2,98,0],[124,3,98,1],[126,2,100,0],[127,0,101,0],[128,0,102,0],[129,0,103,0],[130,0,104,0],[131,0,105,0],[132,0,106,0],[133,2,107,7],[133,8,107,13,"generateReport"],[133,22,107,27],[133,25,107,30],[133,31,107,37,"survey"],[133,37,107,43],[133,41,107,48],[134,4,108,2],[134,8,108,6],[135,6,109,4],[136,6,110,4],[136,12,110,10,"report"],[136,18,110,16],[136,21,110,19],[137,8,111,6,"reportId"],[137,16,111,14],[137,18,111,16],[137,28,111,26,"Date"],[137,32,111,30],[137,33,111,31,"now"],[137,36,111,34],[137,37,111,35],[137,38,111,36],[137,40,111,38],[138,8,112,6,"generatedAt"],[138,19,112,17],[138,21,112,19],[138,25,112,23,"Date"],[138,29,112,27],[138,30,112,28],[138,31,112,29],[138,32,112,30,"toISOString"],[138,43,112,41],[138,44,112,42],[138,45,112,43],[139,8,113,6,"survey"],[139,14,113,12],[139,16,113,14],[140,10,114,8,"owner"],[140,15,114,13],[140,17,114,15,"survey"],[140,23,114,21],[140,24,114,22,"name"],[140,28,114,26],[141,10,115,8,"area"],[141,14,115,12],[141,16,115,14,"survey"],[141,22,115,20],[141,23,115,21,"area"],[141,27,115,25],[142,10,116,8,"tax"],[142,13,116,11],[142,15,116,13,"survey"],[142,21,116,19],[142,22,116,20,"tax"],[142,25,116,23],[143,10,117,8,"location"],[143,18,117,16],[143,20,117,18,"survey"],[143,26,117,24],[143,27,117,25,"gps"],[143,30,117,28],[144,10,118,8,"address"],[144,17,118,15],[144,19,118,17,"survey"],[144,25,118,23],[144,26,118,24,"address"],[145,8,119,6],[145,9,119,7],[146,8,120,6,"format"],[146,14,120,12],[146,16,120,14],[147,6,121,4],[147,7,121,5],[148,6,123,4,"console"],[148,13,123,11],[148,14,123,12,"log"],[148,17,123,15],[148,18,123,16],[148,44,123,42],[148,46,123,44,"report"],[148,52,123,50],[148,53,123,51,"reportId"],[148,61,123,59],[148,62,123,60],[150,6,125,4],[151,6,126,4],[152,6,127,4],[153,6,128,4],[154,0,129,0],[155,0,130,0],[156,0,131,0],[157,0,132,0],[158,0,133,0],[160,6,135,4],[160,13,135,11,"report"],[160,19,135,17],[161,4,136,2],[161,5,136,3],[161,6,136,4],[161,13,136,11,"e"],[161,14,136,12],[161,16,136,14],[162,6,137,4,"console"],[162,13,137,11],[162,14,137,12,"error"],[162,19,137,17],[162,20,137,18],[162,46,137,44],[162,48,137,46,"e"],[162,49,137,47],[162,50,137,48],[163,6,138,4],[163,12,138,10,"e"],[163,13,138,11],[164,4,139,2],[165,2,140,0],[165,3,140,1],[166,0,140,2],[166,3]],"functionMap":{"names":["<global>","uploadFile","callOCR","generateReport"],"mappings":"AAA;0BCa;CDoC;uBEc;CFkC;8BGS;CHiC"},"hasCjsExports":false},"type":"js/module"}]}