{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"calculateManualArea\", {\n    enumerable: true,\n    get: function () {\n      return calculateManualArea;\n    }\n  });\n  Object.defineProperty(exports, \"estimateAreaFromImage\", {\n    enumerable: true,\n    get: function () {\n      return estimateAreaFromImage;\n    }\n  });\n  Object.defineProperty(exports, \"anomalyCheck\", {\n    enumerable: true,\n    get: function () {\n      return anomalyCheck;\n    }\n  });\n  // Area estimation utilities\n\n  /**\n   * Manual area calculation\n   * @param {number} length - Length in meters\n   * @param {number} breadth - Breadth in meters\n   * @returns {number} Area in square meters\n   */\n  const calculateManualArea = (length, breadth) => {\n    const l = parseFloat(length);\n    const b = parseFloat(breadth);\n    if (isNaN(l) || isNaN(b) || l <= 0 || b <= 0) {\n      throw new Error('Invalid dimensions');\n    }\n    return l * b;\n  };\n\n  /**\n   * Estimate area from image with reference object\n   * STUB IMPLEMENTATION - Replace with CV model API call in production\n   * \n   * Current implementation:\n   * 1. User provides reference object real-world length (e.g., 1 meter stick)\n   * 2. Simple proportional calculation based on reference\n   * \n   * To upgrade to full CV:\n   * - Send image to computer vision API (Azure CV, Google Cloud Vision, or custom model)\n   * - API detects reference object and property boundaries\n   * - Returns calculated area\n   * \n   * @param {string} imageUri - Base64 or file URI of captured image\n   * @param {number} referenceLengthMeters - Real-world length of reference object in meters\n   * @param {number} referencePixels - Pixel length of reference object in image (optional, for advanced usage)\n   * @returns {Promise<number>} Estimated area in square meters\n   */\n  const estimateAreaFromImage = async (imageUri, referenceLengthMeters, referencePixels = 100) => {\n    // Validate inputs\n    const refLength = parseFloat(referenceLengthMeters);\n    const refPx = parseFloat(referencePixels);\n    if (isNaN(refLength) || refLength <= 0) {\n      throw new Error('Invalid reference length');\n    }\n    if (!imageUri) {\n      throw new Error('Image URI is required');\n    }\n\n    // STUB: Simple estimation algorithm\n    // In production, replace this with actual CV API call:\n    /*\n    const response = await fetch(process.env.EXPO_PUBLIC_API_OCR_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        image: imageUri,\n        referenceLength: referenceLengthMeters,\n        task: 'area_estimation'\n      })\n    });\n    const data = await response.json();\n    return data.estimatedArea;\n    */\n\n    // Current stub logic:\n    // Assumes property occupies ~70% of image frame\n    // Uses reference object to calculate scale\n    const pixelsPerMeter = refPx / refLength;\n\n    // Simulated property dimensions (replace with CV detection)\n    const estimatedWidthPixels = 300; // Placeholder\n    const estimatedHeightPixels = 400; // Placeholder\n\n    const estimatedWidth = estimatedWidthPixels / pixelsPerMeter;\n    const estimatedHeight = estimatedHeightPixels / pixelsPerMeter;\n    const area = estimatedWidth * estimatedHeight;\n\n    // Anomaly check\n    if (area > 10000 || area < 1) {\n      console.warn('Area estimation might be unrealistic:', area);\n    }\n    return parseFloat(area.toFixed(2));\n  };\n\n  /**\n   * Anomaly detection for area values\n   * @param {number} area - Calculated area\n   * @param {object} expectedBounds - {min, max} expected area range\n   * @returns {object} {isValid: boolean, message: string}\n   */\n  const anomalyCheck = (area, expectedBounds = {\n    min: 1,\n    max: 10000\n  }) => {\n    const a = parseFloat(area);\n    if (isNaN(a) || a <= 0) {\n      return {\n        isValid: false,\n        message: 'Invalid area value'\n      };\n    }\n    if (a < expectedBounds.min) {\n      return {\n        isValid: false,\n        message: `Area too small (< ${expectedBounds.min} m²). Please verify measurements.`\n      };\n    }\n    if (a > expectedBounds.max) {\n      return {\n        isValid: false,\n        message: `Area too large (> ${expectedBounds.max} m²). Please verify measurements.`\n      };\n    }\n    return {\n      isValid: true,\n      message: 'Area within expected range'\n    };\n  };\n});","lineCount":141,"map":[[7,2,9,0,"Object"],[7,8,9,0],[7,9,9,0,"defineProperty"],[7,23,9,0],[7,24,9,0,"exports"],[7,31,9,0],[8,4,9,0,"enumerable"],[8,14,9,0],[9,4,9,0,"get"],[9,7,9,0],[9,18,9,0,"get"],[9,19,9,0],[10,6,9,0],[10,13,9,0,"calculateManualArea"],[10,32,9,0],[11,4,9,0],[12,2,9,0],[13,2,38,0,"Object"],[13,8,38,0],[13,9,38,0,"defineProperty"],[13,23,38,0],[13,24,38,0,"exports"],[13,31,38,0],[14,4,38,0,"enumerable"],[14,14,38,0],[15,4,38,0,"get"],[15,7,38,0],[15,18,38,0,"get"],[15,19,38,0],[16,6,38,0],[16,13,38,0,"estimateAreaFromImage"],[16,34,38,0],[17,4,38,0],[18,2,38,0],[19,2,95,0,"Object"],[19,8,95,0],[19,9,95,0,"defineProperty"],[19,23,95,0],[19,24,95,0,"exports"],[19,31,95,0],[20,4,95,0,"enumerable"],[20,14,95,0],[21,4,95,0,"get"],[21,7,95,0],[21,18,95,0,"get"],[21,19,95,0],[22,6,95,0],[22,13,95,0,"anomalyCheck"],[22,25,95,0],[23,4,95,0],[24,2,95,0],[25,2,1,0],[27,2,3,0],[28,0,4,0],[29,0,5,0],[30,0,6,0],[31,0,7,0],[32,0,8,0],[33,2,9,7],[33,8,9,13,"calculateManualArea"],[33,27,9,32],[33,30,9,35,"calculateManualArea"],[33,31,9,36,"length"],[33,37,9,42],[33,39,9,44,"breadth"],[33,46,9,51],[33,51,9,56],[34,4,10,2],[34,10,10,8,"l"],[34,11,10,9],[34,14,10,12,"parseFloat"],[34,24,10,22],[34,25,10,23,"length"],[34,31,10,29],[34,32,10,30],[35,4,11,2],[35,10,11,8,"b"],[35,11,11,9],[35,14,11,12,"parseFloat"],[35,24,11,22],[35,25,11,23,"breadth"],[35,32,11,30],[35,33,11,31],[36,4,13,2],[36,8,13,6,"isNaN"],[36,13,13,11],[36,14,13,12,"l"],[36,15,13,13],[36,16,13,14],[36,20,13,18,"isNaN"],[36,25,13,23],[36,26,13,24,"b"],[36,27,13,25],[36,28,13,26],[36,32,13,30,"l"],[36,33,13,31],[36,37,13,35],[36,38,13,36],[36,42,13,40,"b"],[36,43,13,41],[36,47,13,45],[36,48,13,46],[36,50,13,48],[37,6,14,4],[37,12,14,10],[37,16,14,14,"Error"],[37,21,14,19],[37,22,14,20],[37,42,14,40],[37,43,14,41],[38,4,15,2],[39,4,17,2],[39,11,17,9,"l"],[39,12,17,10],[39,15,17,13,"b"],[39,16,17,14],[40,2,18,0],[40,3,18,1],[42,2,20,0],[43,0,21,0],[44,0,22,0],[45,0,23,0],[46,0,24,0],[47,0,25,0],[48,0,26,0],[49,0,27,0],[50,0,28,0],[51,0,29,0],[52,0,30,0],[53,0,31,0],[54,0,32,0],[55,0,33,0],[56,0,34,0],[57,0,35,0],[58,0,36,0],[59,0,37,0],[60,2,38,7],[60,8,38,13,"estimateAreaFromImage"],[60,29,38,34],[60,32,38,37],[60,38,38,37,"estimateAreaFromImage"],[60,39,38,44,"imageUri"],[60,47,38,52],[60,49,38,54,"referenceLengthMeters"],[60,70,38,75],[60,72,38,77,"referencePixels"],[60,87,38,92],[60,90,38,95],[60,93,38,98],[60,98,38,103],[61,4,39,2],[62,4,40,2],[62,10,40,8,"refLength"],[62,19,40,17],[62,22,40,20,"parseFloat"],[62,32,40,30],[62,33,40,31,"referenceLengthMeters"],[62,54,40,52],[62,55,40,53],[63,4,41,2],[63,10,41,8,"refPx"],[63,15,41,13],[63,18,41,16,"parseFloat"],[63,28,41,26],[63,29,41,27,"referencePixels"],[63,44,41,42],[63,45,41,43],[64,4,43,2],[64,8,43,6,"isNaN"],[64,13,43,11],[64,14,43,12,"refLength"],[64,23,43,21],[64,24,43,22],[64,28,43,26,"refLength"],[64,37,43,35],[64,41,43,39],[64,42,43,40],[64,44,43,42],[65,6,44,4],[65,12,44,10],[65,16,44,14,"Error"],[65,21,44,19],[65,22,44,20],[65,48,44,46],[65,49,44,47],[66,4,45,2],[67,4,47,2],[67,8,47,6],[67,9,47,7,"imageUri"],[67,17,47,15],[67,19,47,17],[68,6,48,4],[68,12,48,10],[68,16,48,14,"Error"],[68,21,48,19],[68,22,48,20],[68,45,48,43],[68,46,48,44],[69,4,49,2],[71,4,51,2],[72,4,52,2],[73,4,53,2],[74,0,54,0],[75,0,55,0],[76,0,56,0],[77,0,57,0],[78,0,58,0],[79,0,59,0],[80,0,60,0],[81,0,61,0],[82,0,62,0],[83,0,63,0],[84,0,64,0],[85,0,65,0],[87,4,67,2],[88,4,68,2],[89,4,69,2],[90,4,70,2],[90,10,70,8,"pixelsPerMeter"],[90,24,70,22],[90,27,70,25,"refPx"],[90,32,70,30],[90,35,70,33,"refLength"],[90,44,70,42],[92,4,72,2],[93,4,73,2],[93,10,73,8,"estimatedWidthPixels"],[93,30,73,28],[93,33,73,31],[93,36,73,34],[93,37,73,35],[93,38,73,36],[94,4,74,2],[94,10,74,8,"estimatedHeightPixels"],[94,31,74,29],[94,34,74,32],[94,37,74,35],[94,38,74,36],[94,39,74,37],[96,4,76,2],[96,10,76,8,"estimatedWidth"],[96,24,76,22],[96,27,76,25,"estimatedWidthPixels"],[96,47,76,45],[96,50,76,48,"pixelsPerMeter"],[96,64,76,62],[97,4,77,2],[97,10,77,8,"estimatedHeight"],[97,25,77,23],[97,28,77,26,"estimatedHeightPixels"],[97,49,77,47],[97,52,77,50,"pixelsPerMeter"],[97,66,77,64],[98,4,79,2],[98,10,79,8,"area"],[98,14,79,12],[98,17,79,15,"estimatedWidth"],[98,31,79,29],[98,34,79,32,"estimatedHeight"],[98,49,79,47],[100,4,81,2],[101,4,82,2],[101,8,82,6,"area"],[101,12,82,10],[101,15,82,13],[101,20,82,18],[101,24,82,22,"area"],[101,28,82,26],[101,31,82,29],[101,32,82,30],[101,34,82,32],[102,6,83,4,"console"],[102,13,83,11],[102,14,83,12,"warn"],[102,18,83,16],[102,19,83,17],[102,58,83,56],[102,60,83,58,"area"],[102,64,83,62],[102,65,83,63],[103,4,84,2],[104,4,86,2],[104,11,86,9,"parseFloat"],[104,21,86,19],[104,22,86,20,"area"],[104,26,86,24],[104,27,86,25,"toFixed"],[104,34,86,32],[104,35,86,33],[104,36,86,34],[104,37,86,35],[104,38,86,36],[105,2,87,0],[105,3,87,1],[107,2,89,0],[108,0,90,0],[109,0,91,0],[110,0,92,0],[111,0,93,0],[112,0,94,0],[113,2,95,7],[113,8,95,13,"anomalyCheck"],[113,20,95,25],[113,23,95,28,"anomalyCheck"],[113,24,95,29,"area"],[113,28,95,33],[113,30,95,35,"expectedBounds"],[113,44,95,49],[113,47,95,52],[114,4,95,54,"min"],[114,7,95,57],[114,9,95,59],[114,10,95,60],[115,4,95,62,"max"],[115,7,95,65],[115,9,95,67],[116,2,95,73],[116,3,95,74],[116,8,95,79],[117,4,96,2],[117,10,96,8,"a"],[117,11,96,9],[117,14,96,12,"parseFloat"],[117,24,96,22],[117,25,96,23,"area"],[117,29,96,27],[117,30,96,28],[118,4,98,2],[118,8,98,6,"isNaN"],[118,13,98,11],[118,14,98,12,"a"],[118,15,98,13],[118,16,98,14],[118,20,98,18,"a"],[118,21,98,19],[118,25,98,23],[118,26,98,24],[118,28,98,26],[119,6,99,4],[119,13,99,11],[120,8,99,13,"isValid"],[120,15,99,20],[120,17,99,22],[120,22,99,27],[121,8,99,29,"message"],[121,15,99,36],[121,17,99,38],[122,6,99,59],[122,7,99,60],[123,4,100,2],[124,4,102,2],[124,8,102,6,"a"],[124,9,102,7],[124,12,102,10,"expectedBounds"],[124,26,102,24],[124,27,102,25,"min"],[124,30,102,28],[124,32,102,30],[125,6,103,4],[125,13,103,11],[126,8,103,13,"isValid"],[126,15,103,20],[126,17,103,22],[126,22,103,27],[127,8,103,29,"message"],[127,15,103,36],[127,17,103,38],[127,38,103,59,"expectedBounds"],[127,52,103,73],[127,53,103,74,"min"],[127,56,103,77],[128,6,103,113],[128,7,103,114],[129,4,104,2],[130,4,106,2],[130,8,106,6,"a"],[130,9,106,7],[130,12,106,10,"expectedBounds"],[130,26,106,24],[130,27,106,25,"max"],[130,30,106,28],[130,32,106,30],[131,6,107,4],[131,13,107,11],[132,8,107,13,"isValid"],[132,15,107,20],[132,17,107,22],[132,22,107,27],[133,8,107,29,"message"],[133,15,107,36],[133,17,107,38],[133,38,107,59,"expectedBounds"],[133,52,107,73],[133,53,107,74,"max"],[133,56,107,77],[134,6,107,113],[134,7,107,114],[135,4,108,2],[136,4,110,2],[136,11,110,9],[137,6,110,11,"isValid"],[137,13,110,18],[137,15,110,20],[137,19,110,24],[138,6,110,26,"message"],[138,13,110,33],[138,15,110,35],[139,4,110,64],[139,5,110,65],[140,2,111,0],[140,3,111,1],[141,0,111,2],[141,3]],"functionMap":{"names":["<global>","calculateManualArea","estimateAreaFromImage","anomalyCheck"],"mappings":"AAA;mCCQ;CDS;qCEoB;CFiD;4BGQ;CHgB"},"hasCjsExports":false},"type":"js/module"}]}